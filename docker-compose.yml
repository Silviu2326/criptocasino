version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: crypto-casino-postgres
    environment:
      POSTGRES_USER: crypto_casino
      POSTGRES_PASSWORD: development_password
      POSTGRES_DB: crypto_casino
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U crypto_casino']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: crypto-casino-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: crypto-casino-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  mailhog:
    image: mailhog/mailhog:latest
    container_name: crypto-casino-mailhog
    ports:
      - '8025:8025'  # Web UI
      - '1025:1025'  # SMTP
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:8025']
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-casino-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    container_name: crypto-casino-grafana
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: crypto-casino-api
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: development
      PORT: 3001
      BASE_URL: http://localhost:3001
      FRONTEND_URL: http://localhost:3000
      DATABASE_URL: postgresql://crypto_casino:development_password@postgres:5432/crypto_casino
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: crypto_casino
      DATABASE_USER: crypto_casino
      DATABASE_PASSWORD: development_password
      DATABASE_SSL: false
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      JWT_SECRET: your-super-secret-jwt-key-at-least-32-chars-long
      JWT_ACCESS_TOKEN_EXPIRY: 15m
      JWT_REFRESH_TOKEN_EXPIRY: 7d
      JWT_ISSUER: crypto-casino
      EMAIL_HOST: mailhog
      EMAIL_PORT: 1025
      EMAIL_SECURE: false
      EMAIL_FROM: noreply@crypto-casino.local
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_ACCESS_KEY_ID: minioadmin
      S3_SECRET_ACCESS_KEY: minioadmin123
      S3_BUCKET: crypto-casino-dev
      S3_FORCE_PATH_STYLE: true
      ENCRYPTION_KEY: your-super-secret-encryption-key-32-chars
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: debug
      LOG_FORMAT: pretty
      PROMETHEUS_ENABLED: true
      PROMETHEUS_PORT: 9090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: pnpm dev

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: crypto-casino-web
    ports:
      - '3000:3000'
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_FRONTEND_URL: http://localhost:3000
    depends_on:
      - api
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    command: pnpm dev

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data: